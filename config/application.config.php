<?php
/**
 * Configuration file generated by ZFTool
 * The previous configuration file is stored in application.config.old
 *
 * @see https://github.com/zendframework/ZFTool
 */

if (!file_exists(__DIR__ . '/environment.config.php')) {
    throw new \Exception('environment.config.php does not exist!');
} else {
    require 'environment.config.php';

    if (!isset($env)) {
        throw new \RuntimeException('Application environment is not set. Have you run rake?');
    }
}

$config = [
    'modules' => [
        'DoctrineModule',
        'DoctrineMongoODMModule',
        'Application',
        'Dashboard',
        ],
    'module_listener_options' => [
        'module_paths' => [
            './module',
            './vendor',
            ],

        // An array of paths from which to glob configuration files after
        // modules are loaded. These effectively override configuration
        // provided by modules themselves. Paths may use GLOB_BRACE notation.
        'config_glob_paths' => [
            sprintf('config/autoload/{,*.}{global,%s}.php', $env),
            'config/autoload/{,*.}{local}.php',
        ],

        'config_cache_enabled' => false,

        // The key used to create the configuration cache file name.
        'config_cache_key' => 'app_config',

        // Whether or not to enable a module class map cache.
        // If enabled, creates a module class map cache which will be used
        // by in future requests, to reduce the autoloading process.
        'module_map_cache_enabled' => false,

        // The key used to create the class map cache file name.
        'module_map_cache_key' => 'module_map',

        // The path in which to cache merged configuration.
        'cache_dir' =>  __DIR__ . '/../data/cache',

        // Whether or not to enable modules dependency checking.
        // Enabled by default, prevents usage of modules that depend on other modules
        // that weren't loaded.
        'check_dependencies' => true,
    ],
];
$envConfigPath = __DIR__ . '/' . $env . '.config.php';
if (is_readable($envConfigPath)) {
    $envConfig = require $envConfigPath;

    $config = \Zend\Stdlib\ArrayUtils::merge(
        $config,
        $envConfig
    );
}

return $config;
